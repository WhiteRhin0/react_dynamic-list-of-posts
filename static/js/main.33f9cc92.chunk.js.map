{"version":3,"sources":["components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","components/Comment/Comment.jsx","components/PostDetails/PostDetails.jsx","components/Loader/Loader.jsx","api/api.js","api/posts.js","api/comments.js","api/users.js","App.jsx","index.js"],"names":["PostsList","posts","onSelect","useState","selectedPost","setSelectedPost","className","map","post","userId","title","id","key","type","onClick","postId","showDetails","NewCommentForm","createComment","nameOfAuthor","setName","emailOfAuthor","setEmail","bodyOfComment","setBodyOfComment","onSubmit","e","preventDefault","value","onChange","target","handleChangeName","name","placeholder","handleChangeEmail","handleChangeBody","Comment","comment","onDeleteComment","body","PostDetails","comments","onLoadComments","onAddComment","isHideComments","setIsHideComments","updateComments","useEffect","current","length","Loader","request","url","options","a","fetch","response","ok","Error","status","statusText","json","getUserPosts","getPostDetails","getPostComments","removeComment","commentId","method","addComment","data","JSON","stringify","getUsers","App","setPosts","users","setUsers","setPost","IsRenderPost","setIsRenderPost","setComments","loaderPosts","setLoaderPosts","setValue","loadUsers","selectPost","loadComments","loadPosts","deleteComment","email","newComment","commentsFromServer","filter","usersFromServer","postsFromServer","postsItem","postFromServer","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.33f9cc92.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\n\nexport const PostsList = ({ posts, onSelect }) => {\n  const [selectedPost, setSelectedPost] = useState(0);\n\n  const showDetails = (postId) => {\n    if (selectedPost === postId) {\n      onSelect(0);\n      setSelectedPost(0);\n\n      return;\n    }\n\n    setSelectedPost(postId);\n    onSelect(postId);\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map((post) => {\n          const { userId, title, id } = post;\n\n          return (\n            <li key={id} className=\"PostsList__item\">\n              <div>\n                <b>{`[User #${userId}]: `}</b>\n                {title}\n              </div>\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => showDetails(id)}\n              >\n                { id === selectedPost ? 'Close' : 'Open' }\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onSelect: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ postId, createComment }) => {\n  const [nameOfAuthor, setName] = useState('');\n  const [emailOfAuthor, setEmail] = useState('');\n  const [bodyOfComment, setBodyOfComment] = useState('');\n\n  const handleChangeName = ({ target }) => {\n    const { value } = target;\n\n    setName(value);\n  };\n\n  const handleChangeEmail = ({ target }) => {\n    const { value } = target;\n\n    setEmail(value);\n  };\n\n  const handleChangeBody = ({ target }) => {\n    const { value } = target;\n\n    setBodyOfComment(value);\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(e) => {\n        e.preventDefault();\n        createComment(nameOfAuthor, emailOfAuthor, bodyOfComment, postId);\n        setName('');\n        setEmail('');\n        setBodyOfComment('');\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          value={nameOfAuthor}\n          onChange={e => handleChangeName(e)}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          value={emailOfAuthor}\n          onChange={e => handleChangeEmail(e)}\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          value={bodyOfComment}\n          onChange={e => handleChangeBody(e)}\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  createComment: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Comment.scss';\n\nexport const Comment = ({ comment, onDeleteComment }) => (\n  <>\n    <button\n      type=\"button\"\n      className=\"PostDetails__remove-button button\"\n      onClick={() => {\n        onDeleteComment(comment.id);\n      }}\n    >\n      X\n    </button>\n    <p>{comment.body}</p>\n  </>\n);\n\nComment.propTypes = {\n  comment: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    body: PropTypes.string.isRequired,\n  }).isRequired,\n  onDeleteComment: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Comment } from '../Comment';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({\n  post,\n  comments,\n  onDeleteComment,\n  onLoadComments,\n  onAddComment,\n}) => {\n  const [isHideComments, setIsHideComments] = useState(false);\n  const { body, id } = post;\n\n  const updateComments = () => {\n    onLoadComments(id);\n  };\n\n  useEffect(() => {\n    setIsHideComments(false);\n  }, [id]);\n\n  useEffect(() => updateComments(), []);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{body}</p>\n      </section>\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => {\n            setIsHideComments(current => !current);\n            updateComments();\n          }}\n        >\n          {`${isHideComments ? 'Show' : 'Hide'} ${comments.length} comments`}\n        </button>\n\n        {!isHideComments && (\n          <ul className=\"PostDetails__list\">\n            {comments.map(comment => (\n              <li key={comment.id} className=\"PostDetails__list-item\">\n                <Comment\n                  comment={comment}\n                  onDeleteComment={onDeleteComment}\n                />\n              </li>\n            ))}\n          </ul>\n        )}\n\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm postId={id} createComment={onAddComment} />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  post: PropTypes.shape({\n    body: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n  }).isRequired,\n  comments: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onDeleteComment: PropTypes.func.isRequired,\n  onLoadComments: PropTypes.func.isRequired,\n  onAddComment: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = async(url, options) => {\n  const response = await fetch(`${BASE_URL}${url}`, options);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n};\n","import { request } from './api';\n\nexport const getUserPosts = async() => request('/posts');\n\nexport const getPostDetails = async postId => request(`/posts/${postId}`);\n","import { request } from './api';\n\nexport const getPostComments = async() => request(`/comments`);\n\nexport const removeComment = async commentId => (\n  request(`/comments/${commentId}`, { method: 'DELETE' })\n);\n\nexport const addComment = async data => (\n  request(`/comments`, {\n    method: 'POST',\n    body: JSON.stringify(data),\n  })\n);\n","import { request } from './api';\n\nexport const getUsers = async() => request('/users');\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { Loader } from './components/Loader';\nimport { getUserPosts, getPostDetails } from './api/posts';\nimport { getPostComments, removeComment, addComment } from './api/comments';\nimport { getUsers } from './api/users';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [post, setPost] = useState(0);\n  const [IsRenderPost, setIsRenderPost] = useState(false);\n  const [comments, setComments] = useState([]);\n  const [loaderPosts, setLoaderPosts] = useState(false);\n  const [value, setValue] = useState(0);\n\n  useEffect(() => {\n    loadUsers();\n    selectPost();\n  }, []);\n\n  useEffect(() => {\n    loadComments();\n  }, []);\n\n  useEffect(() => {\n    loadPosts();\n  }, [value]);\n\n  const deleteComment = async(commentId) => {\n    await removeComment(commentId);\n    await loadComments(post.id);\n  };\n\n  const createComment = async(name, email, bodyOfComment, id) => {\n    if (!name || !email || !bodyOfComment) {\n      return;\n    }\n\n    const newComment = {\n      name,\n      email,\n      body: bodyOfComment,\n      postId: id,\n    };\n\n    await addComment(newComment);\n    await loadComments(id);\n  };\n\n  const loadComments = async(postId) => {\n    const commentsFromServer = await getPostComments();\n\n    setComments([...commentsFromServer.data].filter(\n      comment => comment.postId === postId,\n    ));\n  };\n\n  const loadUsers = async() => {\n    setLoaderPosts(true);\n    const usersFromServer = await getUsers();\n\n    setLoaderPosts(false);\n    setUsers(usersFromServer.data);\n  };\n\n  const loadPosts = async() => {\n    const postsFromServer = await getUserPosts();\n\n    setPosts(value === 0\n      ? postsFromServer.data\n      : [...postsFromServer.data]\n        .filter(\n          postsItem => postsItem.userId === value,\n        ));\n  };\n\n  const selectPost = async(postId) => {\n    if (postId === 0) {\n      setIsRenderPost(false);\n\n      return;\n    }\n\n    const postFromServer = await getPostDetails(postId);\n\n    setIsRenderPost(true);\n    setPost(postFromServer.data);\n  };\n\n  return (\n\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            value={value}\n            onChange={({ target }) => setValue(+target.value)}\n            className=\"App__user-selector\"\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option value={user.id} key={user.id}>{user.name}</option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {!posts.length && !loaderPosts\n            ? <div className=\"PostsList__item\">No posts yet</div>\n            : <PostsList posts={posts} onSelect={selectPost} />\n          }\n          { loaderPosts && <Loader />}\n        </div>\n\n        {IsRenderPost && post && (\n          <div className=\"App__content\">\n            <PostDetails\n              post={post}\n              comments={comments}\n              onLoadComments={loadComments}\n              onDeleteComment={deleteComment}\n              onAddComment={createComment}\n            />\n          </div>\n        )}\n\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}